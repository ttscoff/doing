#!/usr/bin/env ruby
require 'gli'
require 'doing'
require 'tempfile'

if RUBY_VERSION.to_f > 1.9
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8
end

include GLI::App
version Doing::VERSION

wwid = WWID.new

program_desc 'A CLI for a What Was I Doing system'

default_command :recent
sort_help :manually

desc 'Output notes if included in the template'
default_value true
switch [:notes], :default_value => true, :negatable => true

# desc 'Wrap notes at X chars (0 for no wrap)'
# flag [:w,:wrapwidth], :must_match => /^\d+$/, :type => Integer

desc 'Specify a different doing_file'
flag [:f, :doing_file]

desc 'Add an entry'
arg_name 'entry'
command :now do |c|
  c.desc 'Section'
  c.arg_name 'section_name'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.desc "Edit entry with #{ENV['EDITOR']}"
  c.switch [:e,:editor]

  c.desc 'Backdate to "date_string" (natural language)'
  c.flag [:back]

  # c.desc "Edit entry with specified app"
  # c.arg_name 'editor_app'
  # c.default_value wwid.config.has_key?('editor_app') && wwid.config['editor_app'] ? wwid.config['editor_app'] : false
  # c.flag [:a,:app]

  c.action do |global_options,options,args|
    if options[:back]
      date = wwid.chronify(options[:back])

      raise "Unable to parse date string" if date.nil?
    else
      date = Time.now
    end

    section = wwid.guess_section(options[:s]) || options[:s].cap_first

    if options[:e] || (args.length == 0 && STDIN.stat.size == 0)
      raise "No EDITOR variable defined in environment" if ENV['EDITOR'].nil?
      input = ""
      input += args.join(" ") if args.length > 0
      input = wwid.fork_editor(input)
      if input
        title, note = wwid.format_input(input)
        wwid.add_item(title.cap_first, section, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "No content"
      end
    else
      if args.length > 0
        title, note = wwid.format_input(args.join(" "))
        wwid.add_item(title.cap_first, section, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      elsif STDIN.stat.size > 0
        title, note = wwid.format_input(STDIN.read)
        wwid.add_item(title.cap_first, section, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "You must provide content when creating a new entry"
      end
    end
  end
end

desc 'Add an item to the Later section'
arg_name 'entry'
command :later do |c|
  c.desc "Edit entry with #{ENV['EDITOR']}"
  c.switch [:e,:editor]

  c.desc "Edit entry with specified app"
  c.arg_name 'editor_app'
  c.default_value wwid.config.has_key?('editor_app') && wwid.config['editor_app'] ? wwid.config['editor_app'] : false
  c.flag [:a,:app]

  c.desc 'Backdate to "date_string" (natural language)'
  c.flag [:back]

  c.action do |global_options,options,args|
    if options[:back]
      date = wwid.chronify(options[:back])
      raise "Unable to parse date string" if date.nil?
    else
      date = Time.now
    end

    if options[:e] || (args.length == 0 && STDIN.stat.size == 0)
      raise "No EDITOR variable defined in environment" if ENV['EDITOR'].nil?
      input = ""
      input += args.join(" ") if args.length > 0
      input = wwid.fork_editor(input)
      if input
        title, note = wwid.format_input(input)
        wwid.add_item(title.cap_first, "Later", {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "No content"
      end
    else
      if args.length > 0
        title, note = wwid.format_input(args.join(" "))
        wwid.add_item(title.cap_first, "Later", {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      elsif STDIN.stat.size > 0
        title, note = wwid.format_input(STDIN.read)
        wwid.add_item(title.cap_first, "Later", {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "You must provide content when creating a new entry"
      end
    end
  end
end

desc 'Add a completed item with @done(date). No argument finishes last entry.'
arg_name 'entry'
command :done do |c|
  c.desc 'Remove @done tag'
  c.default_value false
  c.switch [:r,:remove], :negatable => false, :default_value => false

  c.desc 'Include date'
  c.default_value true
  c.switch [:d,:date], :default_value => true

  c.desc 'Immediately archive the entry'
  c.default_value false
  c.switch [:a,:archive], :negatable => false, :default_value => false

  c.desc 'Backdate to "date_string" (natural language)'
  c.flag [:back]

  c.desc 'Section'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.desc "Edit entry with #{ENV['EDITOR']}"
  c.switch [:e,:editor]

  # c.desc "Edit entry with specified app"
  # c.arg_name 'editor_app'
  # c.default_value wwid.config.has_key?('editor_app') && wwid.config['editor_app'] ? wwid.config['editor_app'] : false
  # c.flag [:a,:app]

  c.action do |global_options,options,args|
    if options[:back]
      date = wwid.chronify(options[:back])
      raise "Unable to parse date string" if date.nil?
    else
      date = Time.now
    end

    section = wwid.guess_section(options[:s]) || options[:s].cap_first
    donedate = options[:d] ? "(#{Time.now.strftime('%F %R')})" : ""

    if options[:e]
      raise "No EDITOR variable defined in environment" if ENV['EDITOR'].nil?
      input = ""
      input += args.join(" ") if args.length > 0
      input = wwid.fork_editor(input)
      if input
        title, note = wwid.format_input(input)
        title += " @done#{donedate}"
        section = "Archive" if options[:a]
        wwid.add_item(title.cap_first, section.cap_first, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "No content"
      end
    elsif args.length == 0 && STDIN.stat.size == 0
      if options[:r]
        wwid.tag_last({:tags => ["done"], :count => 1, :section => section, :remove => true })
      else
        wwid.tag_last({:tags => ["done"], :count => 1, :section => section, :archive => options[:a], :back => date, :date => options[:d]})
      end
    else
      if args.length > 0
        title, note = wwid.format_input(args.join(" "))
        title += " @done#{donedate}"
        section = "Archive" if options[:a]
        wwid.add_item(title.cap_first, section.cap_first, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      elsif STDIN.stat.size > 0
        title, note = wwid.format_input(STDIN.read)
        title += " @done#{donedate}"
        section = options[:a] ? "Archive" : section
        wwid.add_item(title.cap_first, section.cap_first, {:note => note, :back => date})
        wwid.write(wwid.doing_file)
      else
        raise "You must provide content when creating a new entry"
      end
    end
  end
end

desc 'Mark last X entries as @done'
arg_name 'count'
command :finish do |c|
  c.desc 'Include date'
  c.default_value true
  c.switch [:d,:date], :default_value => true

  c.desc 'Backdate to "date_string" (natural language)'
  c.flag [:back]

  c.desc 'Archive entries'
  c.default_value false
  c.switch [:a,:archive], :negatable => false, :default_value => false

  c.desc 'Section'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.action do |global_options,options,args|

    section = wwid.guess_section(options[:s]) || options[:s].cap_first

    if options[:back]
      date = wwid.chronify(options[:back])

      raise "Unable to parse date string" if date.nil?
    else
      date = Time.now
    end

    if args.length > 1
      raise "Only one argument allowed"
    elsif args.length == 0 || args[0] =~ /\d+/
      count = args[0] ? args[0].to_i : 1
      wwid.tag_last({:tags => ["done"], :count => count, :section => section, :archive => options[:a], :date => options[:d], :back => date })
    else
      raise "Invalid argument (specify number of recent items to mark @done)"
    end
  end
end

desc 'Tag last entry'
arg_name 'tag1 [tag2...]'
command :tag do |c|
  c.desc 'Section'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.desc 'How many recent entries to tag'
  c.default_value 1
  c.flag [:c,:count], :default_value => 1

  c.desc 'Include current date/time with tag'
  c.default_value false
  c.switch [:d,:date], :negatable => false, :default_value => false

  c.desc 'Remove given tag(s)'
  c.default_value false
  c.switch [:r,:remove], :negatable => false, :default_value => false

  c.action do |global_options,options,args|
    if args.length == 0
      raise "You must specify at least one tag"
    else

      section = wwid.guess_section(options[:s]) || options[:s].cap_first

      count = options[:c].to_i
      if args.join("") =~ /,/
        tags = args.join("").split(/,/)
      else
        tags = args.join(" ").split(" ") # in case tags are quoted as one arg
      end

      tags.map!{|tag| tag.sub(/^@/,'').strip }

      wwid.tag_last({:tags => tags, :count => count, :section => section, :date => options[:d], :remove => options[:r]})
    end
  end
end

desc 'Mark last entry as highlighted'
command :mark do |c|
  c.desc 'Section'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.desc 'Remove mark'
  c.default_value false
  c.switch [:r,:remove], :negatable => false, :default_value => false


  c.action do |global_options,options,args|
    mark = wwid.config['marker_tag'] || "flagged"
    wwid.tag_last({:tags => [mark], :section => options[:s], :remove => options[:r]})
  end
end



desc 'List all entries'
arg_name 'section [tags]'
command :show do |c|
  c.desc 'Tag boolean (AND,OR,NONE)'
  c.default_value "OR"
  c.flag [:b,:boolean], :default_value => "OR"

  c.desc 'Max count to show'
  c.default_value 0
  c.flag [:c,:count], :default_value => 0

  c.desc 'Age (oldest/newest)'
  c.default_value 'newest'
  c.flag [:a,:age], :default_value => 'newest'

  c.desc 'Sort order (asc/desc)'
  c.default_value 'asc'
  c.flag [:s,:sort], :default_value => 'asc'

  c.desc 'Output to format'
  c.flag [:o,:output]

  c.desc 'Show time intervals on @done tasks'
  c.default_value false
  c.switch [:t,:times], :default_value => true

  c.desc 'Show intervals with totals at the end of output'
  c.default_value false
  c.switch [:totals], :default_value => false, :negatable => true

  c.action do |global_options,options,args|
    tag_filter = false
    tags = []
    if args.length > 0
      if args[0] =~ /^all$/i
        section = "All"
      elsif args[0] =~ /^@/
        section = "All"
        tags.push(args[0].sub(/^@/,''))
      else
        section = wwid.guess_section(args[0])
        raise "No such section: #{args[0]}" unless section
      end
      if args.length > 1
        tags += args[1..-1].map{|tag| tag.sub(/^@/,'').strip}
      end
    else
      section = wwid.current_section
    end

    unless tags.empty?
      tag_filter = {
        'tags' => tags,
        'bool' => options[:b]
      }
    end

    options[:t] = true if options[:totals]

    puts wwid.list_section({:section => section, :count => options[:c].to_i, :tag_filter => tag_filter, :age => options[:a], :order => options[:s], :output => options[:output], :times => options[:t], :highlight => true})

    puts wwid.tag_times if options[:totals]

  end
end

desc 'List recent entries'
default_value 10
arg_name 'count'
command :recent do |c|
  c.desc 'Section'
  c.default_value wwid.current_section
  c.flag [:s,:section], :default_value => wwid.current_section

  c.desc 'Show time intervals on @done tasks'
  c.default_value false
  c.switch [:t,:times], :default_value => true

  c.desc 'Show intervals with totals at the end of output'
  c.default_value false
  c.switch [:totals], :default_value => false, :negatable => true

  c.action do |global_options,options,args|

    section = wwid.guess_section(options[:s]) || options[:s].cap_first

    unless global_options[:version]
      if args.length > 0
        count = args[0].to_i
      else
        count = 10
      end
      options[:t] = true if options[:totals]

      puts wwid.recent(count,section.cap_first,{ :times => options[:t] })

      puts wwid.tag_times if options[:totals]
    end
  end
end

desc 'List entries from today'
command :today do |c|
  c.desc 'Show time intervals on @done tasks'
  c.default_value false
  c.switch [:t,:times], :default_value => true

  c.desc 'Show time totals at the end of output'
  c.default_value false
  c.switch [:totals], :default_value => false, :negatable => true

  c.desc 'Output to format'
  c.flag [:o,:output]

  c.action do |global_options,options,args|

    options[:t] = true if options[:totals]

    puts wwid.today(options[:t],options[:output]).chomp

    puts wwid.tag_times if options[:totals]
  end
end

desc 'List entries from yesterday'
command :yesterday do |c|
  c.action do |global_options, options,args|
    puts wwid.yesterday.strip
  end
end

desc 'Show the last entry'
command :last do |c|
  c.action do |global_options,options,args|
    puts wwid.last.strip
  end
end

desc 'List sections'
command :sections do |c|
  c.action do |global_options,options,args|
    puts wwid.sections.join("\t")
  end
end

desc 'Select a section to display from a menu'
command :choose do |c|
  c.action do |global_options,options,args|
    section = wwid.choose_section
    puts wwid.list_section({:section => section.cap_first, :count => 0})
  end
end

desc 'Add a new section to the "doing" file'
arg_name 'section_name'
command :add_section do |c|
  c.action do |global_options,options,args|
    unless wwid.sections.include?(args[0])
      wwid.add_section(args[0].cap_first)
      wwid.write(wwid.doing_file)
    else
      raise "Section #{args[0]} already exists"
    end
  end
end

desc 'Display a user-created view'
arg_name 'view_name'
command :view do |c|
  c.desc 'Section (override view settings)'
  c.flag [:s,:section]

  c.desc 'Count to display (override view settings)'
  c.flag [:c,:count], :must_match => /^\d+$/, :type => Integer

  c.desc 'Output to format'
  c.flag [:o,:output]

  c.desc 'Show time intervals on @done tasks'
  c.default_value false
  c.switch [:t,:times], :default_value => true

  c.desc 'Show intervals with totals at the end of output'
  c.default_value false
  c.switch [:totals], :default_value => false, :negatable => true

  c.action do |global_options,options,args|
    if args.empty?
      title = wwid.choose_view
    else
      title = wwid.guess_view(args[0])
    end

    if options[:s]
      section = wwid.guess_section(options[:s]) || options[:s].cap_first
    end

    view = wwid.get_view(title)
    if view
      template = view.has_key?('template') ? view['template'] : nil
      format = view.has_key?('date_format') ? view['date_format'] : nil
      tags_color = view.has_key?('tags_color') ? view['tags_color'] : nil
      tag_filter = false
      if view.has_key?('tags')
        unless view['tags'].nil? || view['tags'].empty?
          tag_filter = {'tags' => [], 'bool' => "OR"}
          if view['tags'].class == Array
            tag_filter['tags'] = view['tags'].map{|tag| tag.strip }
          else
            tag_filter['tags'] = view['tags'].gsub(/[, ]+/," ").split(" ").map{|tag| tag.strip }
          end
          tag_filter['bool'] = view.has_key?('tags_bool') && !view['tags_bool'].nil? ? view['tags_bool'].upcase : "OR"
        end
      end
      count = options[:c] ? options[:c] : view.has_key?('count') ? view['count'] : 10
      section = options[:s] ? section : view.has_key?('section') ? view['section'] : wwid.current_section
      order = view.has_key?('order') ? view['order'] : "asc"
      options[:t] = true if options[:totals]
      options[:output].downcase! if options[:output]
      puts wwid.list_section({:section => section, :count => count, :template => template, :format => format, :order => order, :tag_filter => tag_filter, :output => options[:output], :tags_color => tags_color, :times => options[:t], :highlight => true })

      puts wwid.tag_times if options[:totals]
    else
      raise "View #{title} not found in config"
    end
  end
end

desc 'List available custom views'
command :views do |c|
  c.action do |global_options,options,args|
    puts wwid.views.join("\t")
  end
end

desc 'Move entries in between sections'
arg_name 'section'
default_value wwid.current_section
command :archive do |c|
  c.desc 'Count to keep (ignored if archiving by tag)'
  c.default_value 5
  c.flag [:k,:keep], :default_value => 5, :must_match => /^\d+$/, :type => Integer

  c.desc 'Move entries to'
  c.default_value "Archive"
  c.flag [:t,:to], :default_value => "Archive"

  c.desc 'Tag boolean'
  c.default_value "AND"
  c.flag [:b,:bool], :default_value => "AND"

  c.action do |global_options,options,args|
    if args.length > 0
      if args[0] =~ /^@\S+/
        section = "all"
        tags = args.map {|t| t.sub(/^@/,'').strip }
      else
        section = args[0].cap_first
        tags = args.length > 1 ? args[1..-1].map {|t| t.sub(/^@/,'').strip } : nil
      end
    else
      section = wwid.current_section
      tags = nil
    end
    wwid.archive(section,options[:k],options[:t],tags,options[:b])
  end
end

desc 'Open the "doing" file in an editor (OS X)'
command :open do |c|
  c.desc 'open with app name'
  c.arg_name 'app_name'
  c.flag [:a]

  c.desc 'open with app bundle id'
  c.arg_name 'bundle_id'
  c.flag [:b]

  c.desc 'open with $EDITOR'
  c.switch [:e], :negatable => false

  c.action do |global_options,options,args|
    params = options.dup
    params.delete_if { |k,v|
      k.class == String || v.nil? || v == false
    }

    if params.length < 2
      if options[:a]
        system %Q{open -a "#{options[:a]}" "#{File.expand_path(wwid.doing_file)}"}
      elsif options[:b]
        system %Q{open -b "#{options[:b]}" "#{File.expand_path(wwid.doing_file)}"}
      elsif options[:e]
        raise "No EDITOR variable defined in environment" if ENV['EDITOR'].nil?
        system %Q{$EDITOR "#{File.expand_path(wwid.doing_file)}"}
      else
        if wwid.config.has_key?('editor_app') && !wwid.config['editor_app'].nil?
          system %Q{open -a "#{wwid.config['editor_app']}" "#{File.expand_path(wwid.doing_file)}"}
        else
          system %Q{open "#{File.expand_path(wwid.doing_file)}"}
        end
      end
    else
      raise "The open command takes a single parameter. #{params.length} specified."
    end
  end
end

desc 'Edit the configuration file'
command :config do |c|
  c.desc 'Editor to use'
  c.default_value ENV['EDITOR']
  c.flag [:e,:editor], :default_value => nil

  c.desc 'Application to use (OS X only)'
  c.flag [:a]

  c.desc 'Application bundle id to use (OS X only)'
  c.flag [:b]

  c.action do |global_options,options,args|
    if options[:a] || options[:b]
      if options[:a]
        %x{open -a "#{options[:a]}" "#{File.expand_path(DOING_CONFIG)}"}
      elsif options[:b]
        %x{open -b #{options[:b]} "#{File.expand_path(DOING_CONFIG)}"}
      end
    else
      raise "No EDITOR variable defined in environment" if options[:e].nil? && ENV['EDITOR'].nil?
      editor = options[:e].nil? ? ENV['EDITOR'] : options[:e]
      system %Q{#{editor} "#{File.expand_path(DOING_CONFIG)}"}
    end
  end
end

pre do |global,command,options,args|
  if global[:doing_file]
    wwid.init_doing_file(input=global[:doing_file])
  else
    wwid.init_doing_file
  end
  wwid.config[:include_notes] = false unless global[:notes]
  if global[:version]
    puts "doing v" + Doing::VERSION
  end

  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
